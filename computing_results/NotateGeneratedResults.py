# ======================================================
#  Title:  explain the results generated by KGGen
#  Description: notating the triples as N(new), E(Existed), C(Need to Check), and give statistics
#  Input: the explained results
#  Author: Hao Chen
#  Date:   Sep 15th 2019
# ======================================================

import numpy as np
from operator import itemgetter, attrgetter


dataset_flag = "FB15K_TransE"
# dataset_flag = "WN18"

number_of_file = 10      #total file number need to be notated

#the first item is training data, and the rest is test data
# data_file_list = ["../data/FB15K_TransE/train2id_AB_BA_1.txt",
#                   "../data/FB15K_TransE/train2id_AB_BA_2.txt",
#                   "../data/FB15K_TransE/valid2id_AB_BA.txt",
#                   "../data/FB15K_TransE/test2id_AB_BA.txt"]

# data_file_list = ["../data/FB15K_TransE/train2id_sports_1.txt",
#                   "../data/FB15K_TransE/train2id_sports_2.txt",
#                   "../data/FB15K_TransE/valid2id_sports.txt",
#                   "../data/FB15K_TransE/test2id_sports.txt"]

if dataset_flag == "FB15K_TransE":
    data_file_list = ["../data/FB15K_TransE/train2id_Selected200_1.txt",
                    "../data/FB15K_TransE/valid2id_Selected200.txt",
                    "../data/FB15K_TransE/test2id_Selected200_2.txt",
                    "../data/FB15K_TransE/test2id_Selected200.txt"]
    relation_11_arr = np.load("../data/FB15K_TransE/relation_11.npy")
    relation_1n_arr = np.load("../data/FB15K_TransE/relation_1n.npy")
    relation_n1_arr = np.load("../data/FB15K_TransE/relation_n1.npy")
    relation_nn_arr = np.load("../data/FB15K_TransE/relation_nn.npy")
else:
    data_file_list = ["../data/WN18_TransE/train2id_Selected200_1.txt",
                      "../data/WN18_TransE/valid2id_Selected200.txt",
                      "../data/WN18_TransE/test2id_Selected200_2.txt",
                      "../data/WN18_TransE/test2id_Selected200.txt"]
    relation_11_arr = np.load("../data/WN18_TransE/relation_11.npy")
    relation_1n_arr = np.load("../data/WN18_TransE/relation_1n.npy")
    relation_n1_arr = np.load("../data/WN18_TransE/relation_n1.npy")
    relation_nn_arr = np.load("../data/WN18_TransE/relation_nn.npy")


def NotateTuple(head, tail, relation):
    head = getID(head)
    tail = getID(tail)
    relation = getID(relation)

    key = head + "-" + tail + "-" + relation

    try:
        index = training_data_dict[key]
        return "E"
    except:
        pass

    try:
        index = test_data_dict[key]
        return "N"
    except:
        pass

    return "C"

#notate the type of relationship
def NotateRelationType(relation):

    relation = int(getID(relation))

    index_11 = np.where(relation_11_arr == relation)
    index_1n = np.where(relation_1n_arr == relation)
    index_n1 = np.where(relation_n1_arr == relation)
    index_nn = np.where(relation_nn_arr == relation)

    if index_11[0].size != 0:
        return "1-1"
    elif index_1n[0].size != 0:
        return "1-n"
    elif index_n1[0].size:
        return "n-1"
    else:
        return "n-n"


#get the id of entity and relation
def getID(str):
    # from the tail of string to the start of the string,
    # eg. Tom(musician)(178), we need 178, not musician
    start = int(str.rfind("("))
    end = int(str.rfind(")"))

    id = str[start+1: end]

    return id



#load the training data as an dictionary
training_data_dict = dict()
for i in range(0,2):
    with open(data_file_list[i], "r") as training_data_file:
        index = 0

        TotalLineNum = (int)(training_data_file.readline())
        for i in range(TotalLineNum):
            content = training_data_file.readline()
            h, t, r = content.strip().split("\t")

            key = h + "-" + t + "-" + r
            training_data_dict[key] = index
            index = index + 1

        # training_data_file.next()
        # for line in training_data_file:
        #     h, t, r = line.strip().split("\t")
		#
        #     key = h + "-" + t + "-" + r
        #     training_data_dict[key] = index
        #     index = index + 1
    training_data_file.close()


#load the test data as an dictionary
test_data_dict = dict()
for i in range(2,4):
    index = 0
    with open(data_file_list[i], "r") as test_data_file:

        TotalLineNum = (int)(test_data_file.readline())
        for i in range(TotalLineNum):
            content = test_data_file.readline()
            h, t, r = content.strip().split("\t")

            key = h + "-" + t + "-" + r
            test_data_dict[key] = index
            index = index + 1


        # test_data_file.next()
        # for line in test_data_file:
        #     h, t, r = line.strip().split("\t")
		#
        #     key = h + "-" + t + "-" + r
        #     test_data_dict[key] = index
        #     index = index + 1
    test_data_file.close()


class RelationStatisInfo():
    def __init__(self, r_name, n_num, e_num, c_num):
        self.relation_name = r_name
        self.new_num = n_num
        self.exist_num = e_num
        self.check_num = c_num

        # if e_num ==0:
        #     a = 0

        self.new_ratio = float(n_num) / float(n_num + e_num + c_num)
        self.exist_ratio = float(e_num) / float(n_num + e_num + c_num)
        self.check_ratio = float(c_num) / float(n_num + e_num + c_num)


#notate the explained file
def Notating_Explained_file(explained_file_name, notated_file_name):

    #statitic for all relations
    nLabel_New = 0
    nLabel_Exist = 0
    nLabel_NeedCheck = 0

    #statitic for 1-1 relations
    nLabel_New_11 = 0
    nLabel_Exist_11 = 0
    nLabel_NeedCheck_11 = 0

    #statitic for 1-n relations
    nLabel_New_1n = 0
    nLabel_Exist_1n = 0
    nLabel_NeedCheck_1n = 0

    #statitic for n-1 relations
    nLabel_New_n1 = 0
    nLabel_Exist_n1 = 0
    nLabel_NeedCheck_n1 = 0

    #statitic for n-n relations
    nLabel_New_nn = 0
    nLabel_Exist_nn = 0
    nLabel_NeedCheck_nn = 0

    refined_relation_list_11 = []
    refined_relation_list_1n = []
    refined_relation_list_n1 = []
    refined_relation_list_nn = []

    relations_statistic_info_list = []
    with open(explained_file_name, "r") as Gen_file, open(notated_file_name, "w") as Gen_file_notated:
        # Gen_file.next()
        cur_r = ""      #the relation be handled now
        nLabel_New_r = 0
        nLabel_Exist_r = 0
        nLabel_NeedCheck_r = 0
        for line in Gen_file:
            score, D_score, h, t, r = line.strip().split("\t")
            if cur_r == "":     #the first time
                cur_r = r
            elif cur_r != r:        #the old relation can be handled
                rsi = RelationStatisInfo(cur_r, nLabel_New_r, nLabel_Exist_r, nLabel_NeedCheck_r)
                relations_statistic_info_list.append(rsi)
                #init for the next relationship
                nLabel_New_r = 0
                nLabel_Exist_r = 0
                nLabel_NeedCheck_r = 0
                cur_r = r

            label = NotateTuple(h, t, r)
            relation_type = NotateRelationType(r)

            if relation_type == "1-1":
                refined_relation_list_11.append(getID(r))
            elif relation_type == "1-n":
                refined_relation_list_1n.append(getID(r))
            elif relation_type == "n-1":
                refined_relation_list_n1.append(getID(r))
            else:
                refined_relation_list_nn.append(getID(r))

            if label == "E":
                nLabel_Exist = nLabel_Exist + 1
                nLabel_Exist_r += 1

                if relation_type == "1-1":
                    nLabel_Exist_11 += 1
                elif relation_type == "1-n":
                    nLabel_Exist_1n += 1
                elif relation_type == "n-1":
                    nLabel_Exist_n1 += 1
                else:
                    nLabel_Exist_nn += 1

            elif label == "N":
                nLabel_New = nLabel_New + 1
                nLabel_New_r += 1

                if relation_type == "1-1":
                    nLabel_New_11 += 1
                elif relation_type == "1-n":
                    nLabel_New_1n += 1
                elif relation_type == "n-1":
                    nLabel_New_n1 += 1
                else:
                    nLabel_New_nn += 1
            else:
                nLabel_NeedCheck = nLabel_NeedCheck + 1
                nLabel_NeedCheck_r += 1

                if relation_type == "1-1":
                    nLabel_NeedCheck_11 += 1
                elif relation_type == "1-n":
                    nLabel_NeedCheck_1n += 1
                elif relation_type == "n-1":
                    nLabel_NeedCheck_n1 += 1
                else:
                    nLabel_NeedCheck_nn += 1

            try:
                Gen_file_notated.write(label + "\t" + score + "\t" + D_score + "\t" + h + "\t" + t + "\t" + r + "\n")
            except:
                pass

        #for the last relation, we should do the statistic work
        rsi = RelationStatisInfo(cur_r, nLabel_New_r, nLabel_Exist_r, nLabel_NeedCheck_r)
        relations_statistic_info_list.append(rsi)


        #sort the relations_statistic_info_list
        # sorted_relations_statistic_info_list = sorted(relations_statistic_info_list, key=attrgetter('check_num', 'exist_num', 'new_num'), reverse=True)
        s1 = sorted(relations_statistic_info_list, key=attrgetter('exist_num'), reverse=False)
        s2 = sorted(s1, key=attrgetter('new_num'), reverse=False)
        s3 = sorted(s2, key=attrgetter('check_num'), reverse=True)
        s4 = sorted(s3, key=attrgetter('exist_ratio'), reverse=False)
        s5 = sorted(s4, key=attrgetter('new_ratio'), reverse=False)
        sorted_relations_statistic_info_list = sorted(s5, key=attrgetter('check_ratio'), reverse=True)

        Gen_file_notated.write("\n\n\n")
        for item in sorted_relations_statistic_info_list:
            strMsg = "Relationship:" +  item.relation_name + "\t" + \
                     "New:" + str(item.new_num) + "\t" + \
                     "Exist:" + str(item.exist_num) + "\t" + \
                     "Need Check:" + str(item.check_num) + "\n"
            Gen_file_notated.write(strMsg)


        Gen_file_notated.write("\n\n")
        strMsg = "\n\nGenerated " + str(nLabel_New + nLabel_Exist + nLabel_NeedCheck) + " tuples\n"
        Gen_file_notated.write(strMsg)
        strMsg = "New:" + str(nLabel_New) + "\t" + "Exist:" + str(nLabel_Exist) + "\t" + "Need Check:" + str(
            nLabel_NeedCheck)
        Gen_file_notated.write(strMsg)
        Gen_file_notated.write("\n\n")

        strMsg = "New(1-1):" + str(nLabel_New_11) + "\t" + "Exist(1-1):" + str(nLabel_Exist_11) + "\t" + "Need Check(1-1):" + str(
            nLabel_NeedCheck_11)
        Gen_file_notated.write(strMsg)
        Gen_file_notated.write("\n")

        strMsg = "New(1-n):" + str(nLabel_New_1n) + "\t" + "Exist(1-n):" + str(
            nLabel_Exist_1n) + "\t" + "Need Check(1-n):" + str(
            nLabel_NeedCheck_1n)
        Gen_file_notated.write(strMsg)
        Gen_file_notated.write("\n")

        strMsg = "New(n-1):" + str(nLabel_New_n1) + "\t" + "Exist(n-1):" + str(
            nLabel_Exist_n1) + "\t" + "Need Check(n-1):" + str(
            nLabel_NeedCheck_n1)
        Gen_file_notated.write(strMsg)
        Gen_file_notated.write("\n")

        strMsg = "New(n-n):" + str(nLabel_New_nn) + "\t" + "Exist(n-n):" + str(
            nLabel_Exist_nn) + "\t" + "Need Check(n-n):" + str(
            nLabel_NeedCheck_nn)
        Gen_file_notated.write(strMsg)
        Gen_file_notated.write("\n")

        relation_11_arr = np.array(list(set(refined_relation_list_11)))
        relation_1n_arr = np.array(list(set(refined_relation_list_1n)))
        relation_n1_arr = np.array(list(set(refined_relation_list_n1)))
        relation_nn_arr = np.array(list(set(refined_relation_list_nn)))

        Gen_file_notated.write("1-1 relation include: ")
        strMsg = ""
        for item in relation_11_arr:
            strMsg = strMsg + str(item) + " "
        Gen_file_notated.write(strMsg)
        Gen_file_notated.write("\n")

        Gen_file_notated.write("1-n relation include: ")
        strMsg = ""
        for item in relation_1n_arr:
            strMsg = strMsg + str(item) + " "
        Gen_file_notated.write(strMsg)
        Gen_file_notated.write("\n")

        Gen_file_notated.write("n-1 relation include: ")
        strMsg = ""
        for item in relation_n1_arr:
            strMsg = strMsg + str(item) + " "
        Gen_file_notated.write(strMsg)
        Gen_file_notated.write("\n")

        Gen_file_notated.write("n-n relation include: ")
        strMsg = ""
        for item in relation_nn_arr:
            strMsg = strMsg + str(item) + " "
        Gen_file_notated.write(strMsg)

        # print("\nNotation completed\n")


#file generated by model
source_file_name = "./new/PredictedEntityPairs_Explain"
result_file_name = "./new/PredictedEntityPairs_Notated"

for i in range(number_of_file):
    if i == 0:
        cur_source_file_name = source_file_name + ".txt"
        cur_result_file_name = result_file_name + ".txt"
    else:
        cur_source_file_name = source_file_name + str(i + 1) + ".txt"
        cur_result_file_name = result_file_name + str(i + 1) + ".txt"

    Notating_Explained_file(cur_source_file_name, cur_result_file_name)

    Msg = "File " + str(i + 1) + " is notated"
    print(Msg)