# ======================================================
#  Title:  explain the results generated by KGGen
#  Description: Translating the results from id to name
#  Input: the generated results
#  Author: Hao Chen
#  Date:   Sep 15th 2019
# ======================================================


from io import open


dataset_flag = "FB15K"
# dataset_flag = "WN18"

number_of_file = 10

# read the MID to EntityName Mapping dictionary
def ReadEntityMID2NameFile(strFilename):
    DicFile = open(strFilename, "r")

    # count the line number of the dictionary
    meDictionary = {}
    # count = -1
    # for count, line in enumerate(DicFile):
    #     pass
    # count += 1

    count = 7611845
    # count = 50000  # just for debug

    # read data by line
    for i in range(count):
        content = DicFile.readline()
        if (content == ''):
            continue

        # get Mid and EntityName
        str_list = content.strip().split()
        Mid = str_list[0]

        j = 1
        EntityName = ""
        while (j < len(str_list) - 1):
            EntityName += str_list[j]
            EntityName += "_"
            j = j + 1
        EntityName += str_list[-1]

        # Mid, EntityName = content.strip().split(num=1)
        meDictionary[Mid] = EntityName  # generate the dictionary

    return meDictionary

#read RelationID2NameFile and form mapping dictionary
def ReadRelationID2NameFile(strFilename):
    MappingDict = dict()

    FileHandler = open(strFilename, "r")
    TotalLineNum = (int)(FileHandler.readline())

    for i in range(TotalLineNum):
        content = FileHandler.readline()
        r_name, r_id = content.strip().split()
        MappingDict[r_id] = r_name
    return MappingDict


#read ReadEntityID2MIDFile and form mapping dictionary
def ReadEntityID2MIDFile(strFilename):
    MappingDict = dict()

    FileHandler = open(strFilename, "r")
    TotalLineNum = (int)(FileHandler.readline())

    for i in range(TotalLineNum):
        content = FileHandler.readline()
        e_mid, e_id = content.strip().split()
        MappingDict[e_id] = e_mid
    return MappingDict


#read mapping file of wn18 (entity id to name) and form mapping dictionary
def ReadEntityID2NameFile4WN18(strFilename):
    MappingDict = dict()

    FileHandler = open(strFilename, "r")
    TotalLineNum = (int)(FileHandler.readline())

    for i in range(TotalLineNum):
        content = FileHandler.readline()
        e_id, e_name, discard = content.strip().split("\t")
        MappingDict[e_id] = e_name
    return MappingDict


#save the single result file
def DumpResult2File(source_file_name, result_file_name):
    with open(result_file_name, "w") as Explain_file, open(source_file_name,"r") as Ora_file:

        for line in Ora_file:
            score, D_score, e_id1, e_id2, r_id = line.strip().split("\t")
            try:
                e_name1 = EntityMID2NameDict[EntityID2MIDDict[e_id1]]
                e_name2 = EntityMID2NameDict[EntityID2MIDDict[e_id2]]
                r_name = RelationID2NameDic[r_id]
                Explain_file.write(
                    score + "\t" + D_score + "\t" + e_name1 + "(" + e_id1 + ")" + "\t" + e_name2 + "(" + e_id2 + ")" + "\t" + r_name + "(" + r_id + ")" + "\n")
            except:
                pass

    Explain_file.close()
    Ora_file.close()


if __name__ == '__main__':
    if dataset_flag == "FB15K" :
        EntityID2MIDDict = ReadEntityID2MIDFile('../data/FB15K_TransE/entity2id.txt')
        EntityMID2NameDict = ReadEntityMID2NameFile('../data/FB15K_TransE/mid2name.tsv')
        RelationID2NameDic = ReadRelationID2NameFile('../data/FB15K_TransE/relation2id.txt')
    else:
        EntityID2MIDDict = ReadEntityID2MIDFile('../data/WN18_TransE/entity2id.txt')
        EntityMID2NameDict = ReadEntityID2NameFile4WN18('../data/WN18_TransE/wordnet-mlj12-definitions.txt')
        RelationID2NameDic = ReadRelationID2NameFile('../data/WN18_TransE/relation2id.txt')

    # # find some eg for each relation
    # with open("./new/PredictedEntityPairs_Explain.txt", "w") as Explain_file, open("./new/PredictedEntityPairs.txt", "r") as Ora_file:
	#
    #     for line in Ora_file:
    #         score, D_score, e_id1, e_id2, r_id = line.strip().split("\t")
    #         try:
    #             e_name1 = EntityMID2NameDict[EntityID2MIDDict[e_id1]]
    #             e_name2 = EntityMID2NameDict[EntityID2MIDDict[e_id2]]
    #             r_name = RelationID2NameDic[r_id]
    #             Explain_file.write(score + "\t" + D_score + "\t" + e_name1 +"(" + e_id1 +")" + "\t" + e_name2 +"(" + e_id2 +")" + "\t" + r_name +"(" + r_id +")" + "\n")
    #         except:
    #             pass
	#
    # Explain_file.close()
    # Ora_file.close()

    source_file_name = "./new/PredictedEntityPairs"
    result_file_name = "./new/PredictedEntityPairs_Explain"

    # explain muliti-files at one batch
    for i in range(number_of_file):
        if i == 0:
            cur_source_file_name = source_file_name + ".txt"
            cur_result_file_name = result_file_name + ".txt"
        else:
            cur_source_file_name = source_file_name + str(i + 1) + ".txt"
            cur_result_file_name = result_file_name + str(i + 1) + ".txt"
        DumpResult2File(cur_source_file_name, cur_result_file_name)

        Msg = "File " + str(i+1) + " is explained"
        print(Msg)
